datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

// NextAuth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Account {
  id                String  @id @default(cuid()) @map("account_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?

  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("session_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String       @id @default(cuid()) @map("user_id")
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  tokens        TurboToken[]
  events        EventItem[]
  permission    Permission[]
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  @@map("users")
}

model Project {
  id          String       @id @default(cuid()) @map("project_id")
  slug        String?      @unique
  name        String?
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  tokens      TurboToken[]
  events      EventItem[]
  permissions Permission[]
  storage     Storage?

  @@map("projects")
}

model Permission {
  id        String   @id @default(cuid()) @map("role_id")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id])
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([projectId])
  @@map("permissions")
}

model TurboToken {
  id        String   @id @default(cuid())
  token     String   @unique
  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([projectId])
  @@map("turbotokens")
}

model EventItem {
  id        String @id @default(cuid())
  duration  Int?
  event     String
  hash      String @db.Text
  sessionId String
  source    String

  projectId String   @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([projectId])
  @@map("events")
}

model Storage {
  id        String   @id @default(cuid()) @map("storage_id")
  name      String?
  config    Json
  projectId String   @unique @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([projectId])
  @@map("storages")
}
